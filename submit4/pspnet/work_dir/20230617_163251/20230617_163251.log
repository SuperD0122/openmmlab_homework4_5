2023/06/17 16:32:51 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.7.10 (default, Jun  4 2021, 14:48:32) [GCC 7.5.0]
    CUDA available: True
    numpy_random_seed: 0
    GPU 0: NVIDIA GeForce RTX 3060
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.2, V11.2.152
    GCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
    PyTorch: 1.10.1+cu113
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

    TorchVision: 0.11.2+cu113
    OpenCV: 4.5.4
    MMEngine: 0.7.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 0
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/17 16:32:52 - mmengine - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(64, 64))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(256, 256)),
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=6,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=6,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'watermelon'
data_root = 'watermelon/'
crop_size = (256, 256)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(2048, 1024),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(64, 64), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', file_client_args=dict(backend='disk')),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=8,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='watermelon',
        data_root='watermelon/',
        data_prefix=dict(
            img_path='img_dir/train', seg_map_path='ann_dir/train'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(2048, 1024),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(64, 64), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs')
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='watermelon',
        data_root='watermelon/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='watermelon',
        data_root='watermelon/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = None
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=40000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=6000, val_interval=300)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=300, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=300),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
work_dir = './work_dirs/watermelon'
randomness = dict(seed=0)

2023/06/17 16:33:00 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/17 16:33:00 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/17 16:33:29 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
2023/06/17 16:33:30 - mmengine - INFO - load model from: open-mmlab://resnet50_v1c
2023/06/17 16:33:30 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://resnet50_v1c
2023/06/17 16:33:30 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

decode_head.conv_seg.weight - torch.Size([6, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([6]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 4096, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([6, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([6]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/06/17 16:33:30 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/17 16:33:30 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/17 16:33:30 - mmengine - INFO - Checkpoints will be saved to /home/featurize/work/mmseg/20230612/mmsegmentation/work_dirs/watermelon.
2023/06/17 16:33:34 - mmengine - INFO - Exp name: pspnet-watermelon_20230617_20230617_163251
2023/06/17 16:33:34 - mmengine - INFO - Iter(train) [   6/6000]  lr: 9.9989e-03  eta: 1:09:15  time: 0.6932  data_time: 0.0150  memory: 5948  loss: 0.1538  decode.loss_ce: 0.1078  decode.acc_seg: 30.8838  aux.loss_ce: 0.0461  aux.acc_seg: 21.5393
2023/06/17 16:35:12 - mmengine - INFO - Iter(train) [ 300/6000]  lr: 9.9334e-03  eta: 0:32:21  time: 0.3351  data_time: 0.0096  memory: 3774  loss: 0.0555  decode.loss_ce: 0.0391  decode.acc_seg: 80.7129  aux.loss_ce: 0.0164  aux.acc_seg: 81.3934
2023/06/17 16:35:12 - mmengine - INFO - Saving checkpoint at 300 iterations
2023/06/17 16:35:26 - mmengine - INFO - per class results:
2023/06/17 16:35:26 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      | 47.14 | 49.12 |
|    red     | 27.47 | 28.12 |
|   green    |  0.19 |  0.19 |
|   white    |  11.1 | 98.35 |
| seed_black | 12.77 | 13.01 |
| seed_white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/17 16:35:26 - mmengine - INFO - Iter(val) [11/11]    aAcc: 43.2400  mIoU: 16.4400  mAcc: 31.4700  data_time: 0.0334  time: 1.0393
2023/06/17 16:37:07 - mmengine - INFO - Iter(train) [ 600/6000]  lr: 9.8665e-03  eta: 0:30:28  time: 0.3389  data_time: 0.0113  memory: 5198  loss: 0.0531  decode.loss_ce: 0.0374  decode.acc_seg: 79.9194  aux.loss_ce: 0.0157  aux.acc_seg: 83.6060
2023/06/17 16:37:07 - mmengine - INFO - Saving checkpoint at 600 iterations
2023/06/17 16:37:12 - mmengine - INFO - per class results:
2023/06/17 16:37:12 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      | 80.96 | 94.78 |
|    red     | 75.21 | 79.75 |
|   green    | 39.55 | 47.84 |
|   white    | 50.09 |  63.6 |
| seed_black | 46.85 | 50.73 |
| seed_white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/17 16:37:12 - mmengine - INFO - Iter(val) [11/11]    aAcc: 85.0100  mIoU: 48.7800  mAcc: 56.1100  data_time: 0.0112  time: 0.2383
2023/06/17 16:38:53 - mmengine - INFO - Iter(train) [ 900/6000]  lr: 9.7995e-03  eta: 0:28:44  time: 0.3372  data_time: 0.0104  memory: 3774  loss: 0.0408  decode.loss_ce: 0.0286  decode.acc_seg: 89.6698  aux.loss_ce: 0.0122  aux.acc_seg: 88.8367
2023/06/17 16:38:53 - mmengine - INFO - Saving checkpoint at 900 iterations
2023/06/17 16:38:59 - mmengine - INFO - per class results:
2023/06/17 16:38:59 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      | 76.35 | 97.81 |
|    red     | 69.06 | 73.16 |
|   green    |  4.23 |  4.24 |
|   white    | 52.85 | 55.91 |
| seed_black | 32.05 | 32.75 |
| seed_white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/17 16:38:59 - mmengine - INFO - Iter(val) [11/11]    aAcc: 81.4300  mIoU: 39.0900  mAcc: 43.9800  data_time: 0.0111  time: 0.2379
2023/06/17 16:39:32 - mmengine - INFO - Exp name: pspnet-watermelon_20230617_20230617_163251
2023/06/17 16:40:39 - mmengine - INFO - Iter(train) [1200/6000]  lr: 9.7325e-03  eta: 0:27:00  time: 0.3390  data_time: 0.0108  memory: 3774  loss: 0.0448  decode.loss_ce: 0.0308  decode.acc_seg: 86.3190  aux.loss_ce: 0.0141  aux.acc_seg: 86.2000
2023/06/17 16:40:39 - mmengine - INFO - Saving checkpoint at 1200 iterations
2023/06/17 16:40:44 - mmengine - INFO - per class results:
2023/06/17 16:40:44 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      |  77.3 | 97.98 |
|    red     |  69.5 | 72.91 |
|   green    | 10.65 |  10.9 |
|   white    | 56.73 |  59.4 |
| seed_black | 62.17 | 69.57 |
| seed_white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/17 16:40:44 - mmengine - INFO - Iter(val) [11/11]    aAcc: 82.3700  mIoU: 46.0600  mAcc: 51.7900  data_time: 0.0090  time: 0.2358
2023/06/17 16:42:25 - mmengine - INFO - Iter(train) [1500/6000]  lr: 9.6655e-03  eta: 0:25:17  time: 0.3350  data_time: 0.0094  memory: 3774  loss: 0.0493  decode.loss_ce: 0.0347  decode.acc_seg: 74.9054  aux.loss_ce: 0.0145  aux.acc_seg: 71.0144
2023/06/17 16:42:25 - mmengine - INFO - Saving checkpoint at 1500 iterations
2023/06/17 16:42:30 - mmengine - INFO - per class results:
2023/06/17 16:42:30 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      |  82.8 | 95.13 |
|    red     |  84.4 | 97.28 |
|   green    |  9.67 | 10.19 |
|   white    | 48.16 | 49.94 |
| seed_black | 63.89 | 71.08 |
| seed_white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/17 16:42:30 - mmengine - INFO - Iter(val) [11/11]    aAcc: 86.4800  mIoU: 48.1500  mAcc: 53.9300  data_time: 0.0090  time: 0.2359
2023/06/17 16:44:10 - mmengine - INFO - Iter(train) [1800/6000]  lr: 9.5983e-03  eta: 0:23:35  time: 0.3354  data_time: 0.0096  memory: 3774  loss: 0.0402  decode.loss_ce: 0.0280  decode.acc_seg: 85.1532  aux.loss_ce: 0.0122  aux.acc_seg: 79.9500
2023/06/17 16:44:10 - mmengine - INFO - Saving checkpoint at 1800 iterations
2023/06/17 16:44:16 - mmengine - INFO - per class results:
2023/06/17 16:44:16 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      | 82.44 |  95.3 |
|    red     | 85.33 | 91.52 |
|   green    | 27.27 |  30.4 |
|   white    | 54.71 | 62.76 |
| seed_black | 28.56 | 28.97 |
| seed_white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/17 16:44:16 - mmengine - INFO - Iter(val) [11/11]    aAcc: 87.0700  mIoU: 46.3900  mAcc: 51.4900  data_time: 0.0112  time: 0.2388
2023/06/17 16:45:23 - mmengine - INFO - Exp name: pspnet-watermelon_20230617_20230617_163251
2023/06/17 16:45:56 - mmengine - INFO - Iter(train) [2100/6000]  lr: 9.5312e-03  eta: 0:21:53  time: 0.3366  data_time: 0.0106  memory: 3774  loss: 0.0384  decode.loss_ce: 0.0267  decode.acc_seg: 81.8756  aux.loss_ce: 0.0117  aux.acc_seg: 81.6925
2023/06/17 16:45:56 - mmengine - INFO - Saving checkpoint at 2100 iterations
2023/06/17 16:46:01 - mmengine - INFO - per class results:
2023/06/17 16:46:01 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      | 81.63 | 96.92 |
|    red     | 79.88 | 85.75 |
|   green    | 20.61 | 21.36 |
|   white    |  59.1 | 63.55 |
| seed_black | 59.94 | 67.81 |
| seed_white |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/17 16:46:01 - mmengine - INFO - Iter(val) [11/11]    aAcc: 86.1500  mIoU: 50.1900  mAcc: 55.9000  data_time: 0.0093  time: 0.2356
2023/06/17 16:47:42 - mmengine - INFO - Iter(train) [2400/6000]  lr: 9.4640e-03  eta: 0:20:12  time: 0.3364  data_time: 0.0101  memory: 3774  loss: 0.0333  decode.loss_ce: 0.0235  decode.acc_seg: 90.5365  aux.loss_ce: 0.0099  aux.acc_seg: 89.3829
2023/06/17 16:47:42 - mmengine - INFO - Saving checkpoint at 2400 iterations
2023/06/17 16:47:47 - mmengine - INFO - per class results:
2023/06/17 16:47:47 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      | 83.46 |  95.6 |
|    red     | 85.49 | 93.68 |
|   green    | 22.18 | 24.02 |
|   white    |  58.4 | 63.09 |
| seed_black | 63.76 |  73.4 |
| seed_white |  0.91 |  0.91 |
+------------+-------+-------+
2023/06/17 16:47:47 - mmengine - INFO - Iter(val) [11/11]    aAcc: 87.6700  mIoU: 52.3700  mAcc: 58.4500  data_time: 0.0092  time: 0.2354
2023/06/17 16:49:28 - mmengine - INFO - Iter(train) [2700/6000]  lr: 9.3967e-03  eta: 0:18:31  time: 0.3388  data_time: 0.0105  memory: 3774  loss: 0.0360  decode.loss_ce: 0.0257  decode.acc_seg: 85.6812  aux.loss_ce: 0.0103  aux.acc_seg: 84.5581
2023/06/17 16:49:28 - mmengine - INFO - Saving checkpoint at 2700 iterations
2023/06/17 16:49:33 - mmengine - INFO - per class results:
2023/06/17 16:49:33 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      | 86.09 | 95.47 |
|    red     | 87.73 | 96.09 |
|   green    | 33.21 | 37.14 |
|   white    | 64.66 | 69.69 |
| seed_black | 68.22 | 78.26 |
| seed_white |  5.31 |  5.31 |
+------------+-------+-------+
2023/06/17 16:49:33 - mmengine - INFO - Iter(val) [11/11]    aAcc: 89.6200  mIoU: 57.5300  mAcc: 63.6600  data_time: 0.0100  time: 0.2371
2023/06/17 16:51:14 - mmengine - INFO - Exp name: pspnet-watermelon_20230617_20230617_163251
2023/06/17 16:51:14 - mmengine - INFO - Iter(train) [3000/6000]  lr: 9.3294e-03  eta: 0:16:50  time: 0.3343  data_time: 0.0087  memory: 3774  loss: 0.0329  decode.loss_ce: 0.0236  decode.acc_seg: 93.2983  aux.loss_ce: 0.0093  aux.acc_seg: 91.8823
2023/06/17 16:51:14 - mmengine - INFO - Saving checkpoint at 3000 iterations
2023/06/17 16:51:19 - mmengine - INFO - per class results:
2023/06/17 16:51:19 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      | 83.53 | 95.39 |
|    red     | 83.65 | 89.92 |
|   green    | 31.87 | 38.07 |
|   white    | 64.52 | 67.44 |
| seed_black | 67.06 | 81.96 |
| seed_white |  6.44 |  6.46 |
+------------+-------+-------+
2023/06/17 16:51:19 - mmengine - INFO - Iter(val) [11/11]    aAcc: 87.8600  mIoU: 56.1800  mAcc: 63.2100  data_time: 0.0090  time: 0.2351
2023/06/17 16:53:00 - mmengine - INFO - Iter(train) [3300/6000]  lr: 9.2620e-03  eta: 0:15:09  time: 0.3373  data_time: 0.0111  memory: 3774  loss: 0.0400  decode.loss_ce: 0.0288  decode.acc_seg: 74.5697  aux.loss_ce: 0.0112  aux.acc_seg: 74.2126
2023/06/17 16:53:00 - mmengine - INFO - Saving checkpoint at 3300 iterations
2023/06/17 16:53:04 - mmengine - INFO - per class results:
2023/06/17 16:53:04 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      | 88.56 | 94.62 |
|    red     | 88.38 | 97.92 |
|   green    | 51.73 |  58.9 |
|   white    | 68.51 | 72.66 |
| seed_black | 56.58 | 89.18 |
| seed_white | 23.29 | 23.56 |
+------------+-------+-------+
2023/06/17 16:53:04 - mmengine - INFO - Iter(val) [11/11]    aAcc: 91.3900  mIoU: 62.8400  mAcc: 72.8100  data_time: 0.0112  time: 0.2380
2023/06/17 16:54:45 - mmengine - INFO - Iter(train) [3600/6000]  lr: 9.1946e-03  eta: 0:13:27  time: 0.3350  data_time: 0.0095  memory: 3774  loss: 0.0331  decode.loss_ce: 0.0232  decode.acc_seg: 89.7980  aux.loss_ce: 0.0099  aux.acc_seg: 88.8153
2023/06/17 16:54:45 - mmengine - INFO - Saving checkpoint at 3600 iterations
2023/06/17 16:54:50 - mmengine - INFO - per class results:
2023/06/17 16:54:50 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      |  80.9 | 96.79 |
|    red     | 80.16 | 82.02 |
|   green    | 27.97 |  32.2 |
|   white    | 54.95 | 61.15 |
| seed_black | 66.43 | 86.78 |
| seed_white | 21.07 | 21.83 |
+------------+-------+-------+
2023/06/17 16:54:50 - mmengine - INFO - Iter(val) [11/11]    aAcc: 85.8100  mIoU: 55.2500  mAcc: 63.4600  data_time: 0.0084  time: 0.2347
2023/06/17 16:56:31 - mmengine - INFO - Iter(train) [3900/6000]  lr: 9.1271e-03  eta: 0:11:46  time: 0.3389  data_time: 0.0119  memory: 3774  loss: 0.0366  decode.loss_ce: 0.0257  decode.acc_seg: 93.6127  aux.loss_ce: 0.0109  aux.acc_seg: 94.5282
2023/06/17 16:56:31 - mmengine - INFO - Saving checkpoint at 3900 iterations
2023/06/17 16:56:36 - mmengine - INFO - per class results:
2023/06/17 16:56:36 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      | 87.68 | 93.96 |
|    red     | 88.28 | 95.94 |
|   green    | 43.72 | 55.39 |
|   white    | 68.31 |  77.1 |
| seed_black |  60.0 | 85.58 |
| seed_white | 20.97 | 21.16 |
+------------+-------+-------+
2023/06/17 16:56:36 - mmengine - INFO - Iter(val) [11/11]    aAcc: 90.5100  mIoU: 61.4900  mAcc: 71.5200  data_time: 0.0098  time: 0.2372
2023/06/17 16:57:09 - mmengine - INFO - Exp name: pspnet-watermelon_20230617_20230617_163251
2023/06/17 16:58:16 - mmengine - INFO - Iter(train) [4200/6000]  lr: 9.0595e-03  eta: 0:10:05  time: 0.3354  data_time: 0.0098  memory: 3774  loss: 0.0246  decode.loss_ce: 0.0170  decode.acc_seg: 91.4612  aux.loss_ce: 0.0076  aux.acc_seg: 89.4653
2023/06/17 16:58:17 - mmengine - INFO - Saving checkpoint at 4200 iterations
2023/06/17 16:58:22 - mmengine - INFO - per class results:
2023/06/17 16:58:22 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      | 88.82 | 96.56 |
|    red     | 89.77 | 97.41 |
|   green    | 30.98 | 32.54 |
|   white    | 67.09 | 79.06 |
| seed_black |  62.6 | 74.03 |
| seed_white | 13.59 | 13.62 |
+------------+-------+-------+
2023/06/17 16:58:22 - mmengine - INFO - Iter(val) [11/11]    aAcc: 90.9300  mIoU: 58.8100  mAcc: 65.5400  data_time: 0.0089  time: 0.2361
2023/06/17 17:00:03 - mmengine - INFO - Iter(train) [4500/6000]  lr: 8.9919e-03  eta: 0:08:24  time: 0.3354  data_time: 0.0096  memory: 3774  loss: 0.0395  decode.loss_ce: 0.0279  decode.acc_seg: 93.7317  aux.loss_ce: 0.0116  aux.acc_seg: 94.8730
2023/06/17 17:00:03 - mmengine - INFO - Saving checkpoint at 4500 iterations
2023/06/17 17:00:08 - mmengine - INFO - per class results:
2023/06/17 17:00:08 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      | 84.47 | 96.83 |
|    red     | 79.86 | 82.22 |
|   green    | 41.93 |  44.8 |
|   white    | 68.46 | 83.73 |
| seed_black | 62.27 | 87.05 |
| seed_white | 42.71 | 49.17 |
+------------+-------+-------+
2023/06/17 17:00:08 - mmengine - INFO - Iter(val) [11/11]    aAcc: 88.3400  mIoU: 63.2800  mAcc: 73.9700  data_time: 0.0085  time: 0.2353
2023/06/17 17:01:49 - mmengine - INFO - Iter(train) [4800/6000]  lr: 8.9243e-03  eta: 0:06:43  time: 0.3384  data_time: 0.0112  memory: 3774  loss: 0.0346  decode.loss_ce: 0.0243  decode.acc_seg: 78.1586  aux.loss_ce: 0.0103  aux.acc_seg: 79.8096
2023/06/17 17:01:49 - mmengine - INFO - Saving checkpoint at 4800 iterations
2023/06/17 17:01:54 - mmengine - INFO - per class results:
2023/06/17 17:01:54 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      |  88.6 | 96.58 |
|    red     |  89.9 | 95.62 |
|   green    | 36.93 | 39.49 |
|   white    | 71.85 | 81.63 |
| seed_black | 62.41 | 92.33 |
| seed_white | 38.01 | 46.88 |
+------------+-------+-------+
2023/06/17 17:01:54 - mmengine - INFO - Iter(val) [11/11]    aAcc: 91.2800  mIoU: 64.6200  mAcc: 75.4200  data_time: 0.0092  time: 0.2361
2023/06/17 17:03:01 - mmengine - INFO - Exp name: pspnet-watermelon_20230617_20230617_163251
2023/06/17 17:03:35 - mmengine - INFO - Iter(train) [5100/6000]  lr: 8.8566e-03  eta: 0:05:02  time: 0.3366  data_time: 0.0105  memory: 3774  loss: 0.0402  decode.loss_ce: 0.0288  decode.acc_seg: 80.1361  aux.loss_ce: 0.0113  aux.acc_seg: 81.0303
2023/06/17 17:03:35 - mmengine - INFO - Saving checkpoint at 5100 iterations
2023/06/17 17:03:39 - mmengine - INFO - per class results:
2023/06/17 17:03:39 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      | 87.85 | 93.84 |
|    red     |  87.0 | 97.82 |
|   green    |  47.1 | 52.01 |
|   white    | 73.31 | 81.66 |
| seed_black | 68.53 | 82.86 |
| seed_white | 35.28 | 39.28 |
+------------+-------+-------+
2023/06/17 17:03:39 - mmengine - INFO - Iter(val) [11/11]    aAcc: 91.0400  mIoU: 66.5100  mAcc: 74.5800  data_time: 0.0086  time: 0.2351
2023/06/17 17:05:20 - mmengine - INFO - Iter(train) [5400/6000]  lr: 8.7888e-03  eta: 0:03:21  time: 0.3377  data_time: 0.0101  memory: 3774  loss: 0.0325  decode.loss_ce: 0.0229  decode.acc_seg: 70.2698  aux.loss_ce: 0.0096  aux.acc_seg: 68.7347
2023/06/17 17:05:20 - mmengine - INFO - Saving checkpoint at 5400 iterations
2023/06/17 17:05:25 - mmengine - INFO - per class results:
2023/06/17 17:05:25 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      | 87.86 | 93.07 |
|    red     | 86.19 | 95.88 |
|   green    | 53.52 | 65.74 |
|   white    | 76.75 | 84.29 |
| seed_black | 64.93 | 76.79 |
| seed_white | 31.13 | 34.71 |
+------------+-------+-------+
2023/06/17 17:05:25 - mmengine - INFO - Iter(val) [11/11]    aAcc: 91.1500  mIoU: 66.7300  mAcc: 75.0800  data_time: 0.0085  time: 0.2347
2023/06/17 17:07:06 - mmengine - INFO - Iter(train) [5700/6000]  lr: 8.7210e-03  eta: 0:01:40  time: 0.3371  data_time: 0.0108  memory: 3774  loss: 0.0365  decode.loss_ce: 0.0262  decode.acc_seg: 70.4224  aux.loss_ce: 0.0103  aux.acc_seg: 78.2074
2023/06/17 17:07:06 - mmengine - INFO - Saving checkpoint at 5700 iterations
2023/06/17 17:07:11 - mmengine - INFO - per class results:
2023/06/17 17:07:11 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      | 87.32 | 95.08 |
|    red     | 88.06 | 93.62 |
|   green    | 45.25 | 52.51 |
|   white    | 70.06 | 82.59 |
| seed_black | 61.35 | 69.68 |
| seed_white | 34.74 | 37.81 |
+------------+-------+-------+
2023/06/17 17:07:11 - mmengine - INFO - Iter(val) [11/11]    aAcc: 90.6700  mIoU: 64.4600  mAcc: 71.8800  data_time: 0.0092  time: 0.2354
2023/06/17 17:08:52 - mmengine - INFO - Exp name: pspnet-watermelon_20230617_20230617_163251
2023/06/17 17:08:52 - mmengine - INFO - Iter(train) [6000/6000]  lr: 8.6531e-03  eta: 0:00:00  time: 0.3365  data_time: 0.0104  memory: 3774  loss: 0.0313  decode.loss_ce: 0.0223  decode.acc_seg: 87.4664  aux.loss_ce: 0.0090  aux.acc_seg: 89.5386
2023/06/17 17:08:52 - mmengine - INFO - Saving checkpoint at 6000 iterations
2023/06/17 17:08:56 - mmengine - INFO - per class results:
2023/06/17 17:08:56 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|     /      | 89.34 | 93.99 |
|    red     | 88.82 | 97.91 |
|   green    | 54.52 | 65.35 |
|   white    | 73.71 | 82.53 |
| seed_black |  59.2 | 64.65 |
| seed_white |  15.0 | 15.01 |
+------------+-------+-------+
2023/06/17 17:08:56 - mmengine - INFO - Iter(val) [11/11]    aAcc: 91.9800  mIoU: 63.4300  mAcc: 69.9100  data_time: 0.0087  time: 0.2352
